<?php

/**
 * @file
 * Install functions for tiles.module.
 */

/**
 * Implements hook_schema().
 */
function tiles_schema() {
  $schema['tile_layout'] = array(
    'description' => 'The base table for tile layouts',
    'fields' => array(
      'tid' => array(
        'description' => 'The primary identifier for a tile layout.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'container' => array(
        'description' => 'The type of container this tile layout belongs to',
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
      ),
      'selector' => array(
        'description' => 'Selector used by container to determine placement (e.g. path for region containers)',
        'type' => 'varchar',
        'length' => 255,
      ),
    ),
    'primary key' => array('tid'),
  );

  $schema['tile_layout_blocks'] = array(
    'description' => 'Stores blocks associated with a tile layout',
    'fields' => array(
      'tid' => array(
        'description' => 'The primary identifier for a tile layout.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'module' => array(
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
        'description' => "The module from which the block originates; for example, 'user' for the Who's Online block, and 'block' for any custom blocks.",
      ),
      'delta' => array(
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '0',
        'description' => 'Unique ID for block within a module.',
      ),
      'region' => array(
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Theme region within which the block is set.',
      ),
      'breakpoint' => array(
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Breakpoint at which width and weight apply for this block.',
      ),
      'weight' => array(
        'description' => 'The weight of block.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'width' => array(
        'description' => 'The width of block.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'indexable' => array(
        'description' => 'The index status of a block.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'offset' => array(
        'description' => 'The grid offset of block.',
        'type' => 'int',
        'unsigned' => FALSE,
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'foreign keys' => array(
      'tid' => array(
        'table' => 'tile',
        'columns' => array('tid' => 'tid'),
      ),
    ),
    'unique keys' => array(
      'tid_module_delta_breakpoint' => array(
        'tid',
        'module',
        'delta',
        'breakpoint',
      ),
    ),
  );
  return $schema;
}

/**
 * Add new indexable column to tiles width table.
 */
function tiles_update_7001() {
  if (db_table_exists('tiles_width')) {
    db_add_field('tiles_width', 'indexable', array(
      'description' => 'The index status of a block.',
      'type' => 'int',
      'unsigned' => TRUE,
      'not null' => TRUE,
      'default' => 0,
    ));
  }
}

/**
 * Make sure registry is rebuilt to avoid upgrade troubles.
 */
function tiles_update_7002() {
  drupal_flush_all_caches();
}

/**
 * Moves tiles off of context.
 */
function tiles_update_7003() {
  $schema = tiles_schema();
  if (!db_table_exists('tile_layout')) {
    db_create_table('tile_layout', $schema['tile_layout']);
  }
  if (!db_table_exists('tile_layout_blocks')) {
    db_create_table('tile_layout_blocks', $schema['tile_layout_blocks']);
  }

  $contexts = db_query("SELECT * FROM {context} WHERE tag = :tag", array(
    ':tag' => 'tiles',
  ));
  foreach ($contexts as $context) {
    $layout = entity_create('tile_layout', array('container' => 'region'));

    $conditions = unserialize($context->conditions);
    $layout->selector = key($conditions['path']['values']);

    $reactions = unserialize($context->reactions);
    foreach ($reactions['tiles']['blocks'] as $block) {
      $block = (object) $block;

      // Get width from old widths table.
      $block->width = db_query("
        SELECT width
        FROM {tiles_width}
        LEFT JOIN {block} USING (bid)
        WHERE
          module = :module AND
          delta = :delta AND
          theme = :theme
          AND context_id = :context_id
        ", array(
          ':module'     => $block->module,
          ':delta'      => $block->delta,
          ':theme'      => variable_get('theme_default', ''),
          ':context_id' => $context->name,
        ))->fetchField();
      if (!$block->width) {
        $block->width = tiles_get_max_step();
      }

      $layout->addBlock($block);
    }

    $layout->save();
    db_query("DELETE FROM {context} WHERE name = :name", array(':name' => $context->name));
    db_query("DELETE FROM {tiles_width} WHERE context_id = :name", array(':name' => $context->name));
  }

  // Only delete tiles width table if empty, in order to allow other modules
  // using tiles as a base (e.g. tiles_sections) to upgrade.
  if (db_query("SELECT COUNT(*) FROM {tiles_width}")->fetchField() == 0) {
    db_drop_table('tiles_width');
  }
}

/**
 * Add new indexable column to tiles width table.
 */
function tiles_update_7004() {
  db_add_field('tiles_layout_blocks', 'offset', array(
    'description' => 'The grid offset of a block.',
    'type' => 'int',
    'unsigned' => FALSE,
    'not null' => TRUE,
    'default' => 0,
  ));
}
